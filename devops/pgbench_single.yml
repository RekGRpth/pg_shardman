### Init and run pgbench on random worker. Controlling vars as in
# pgbench_prepare and pgbench_run, except for tname.
---

- hosts: workers[0]
  environment:
    PATH: "{{ pg_dst }}/bin:{{ ansible_env.HOME }}/root/bin:{{ ansible_env.PATH }}"
    LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"
    CPATH: "{{ ansible_env.HOME }}/root/include"
    LD_LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"
  vars:
    scale: 10
    clients: 1
    tmstmp: True
    tname: pgbench

  tasks:

  - name: drop old pgbench tables with deps
    command: >
      psql -p {{ pg_port }} -c "
      drop table if exists pgbench_accounts cascade;
      drop table if exists pgbench_tellers cascade;
      drop table if exists pgbench_branches cascade;
      drop table if exists pgbench_tellers cascade;
      drop table if exists pgbench_accounts cascade;
      "
  - name: initialize pgbench, scale {{ scale }}
    command: >
      pgbench -p {{ pg_port }} -s {{ scale }} -i

  - name: run pgbench --report-latencies {{ pgbench_opts }}
    shell: >
      pgbench -p {{ pg_port }} --report-latencies {{ pgbench_opts }} 2>&1 > "pgbench.out"

  - name: fetch pgbench exec time
    fetch:
      src: "pgbench.out"
      dest: res/pgbench_single.out
      flat: yes
      fail_on_missing: yes
    tags:
      - fetch

  - name: print tps
    local_action: shell cat res/pgbench_single.out
    register: tps
    run_once: true

  - debug: msg={{ tps.stdout_lines }}