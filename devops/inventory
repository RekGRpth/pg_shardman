[localhost]
# handles ec2 module bugs
localhost ansible_connection=local ansible_python_interpreter=python


[nodes]
# nodes consists of 'manual' (e.g. for local testing) and 'ec2' autogenerated
# by ec2_elect_shardlord.py
# If use the former variant, you must also choose shardlord, init_node and
# worker nodes by hand. See manual.example for example

[nodes:vars]
ansible_user=ubuntu
# on fresh ubuntus, there is no 'python' executable
ansible_python_interpreter=python3

# make -j
makejobs=4
# pg_repo=git://git.postgresql.org/git/postgresql.git
# pg_version_tag=REL_10_STABLE
pg_repo=https://github.com/postgrespro/postgres_cluster.git
pg_version_tag=pg_shardman
# postgres_fdw 2pc and triggers on fdw tables
# pg_version_tag=pg_shardman_tbr_2pc
# pg_prefix="{{ansible_env.HOME}}/pg"
pg_prefix="/tmp/pg"
pg_src="{{pg_prefix}}/src"
cflags="-O2"
pg_dst="{{pg_prefix}}/install"
pg_datadir="{{pg_prefix}}/data_{{pg_port}}"
# pg_datadir="/mnt/data_{{pg_port}}"
pg_logfile="{{pg_datadir}}/pg.log"
pg_conffile="{{pg_datadir}}/postgresql.conf"
pg_port=5432

pgbouncer_src = "{{ pg_prefix }}/pgbouncer-1.7.2"
pgbouncer_dst = "{{ pg_prefix }}/pgbouncer_install"
pgbouncer_conf = "/home/{{ ansible_user }}/pgbouncer.conf"
pgbouncer_port = 6543
pgbouncer_logfile = /tmp/pgbouncer.log
pgbouncer_pool_mode = session
pgbouncer_pool_size = 10
use_pgbouncer = False

pathman_repo=https://github.com/arssher/pg_pathman
pathman_src="{{pg_prefix}}/pg_pathman"
pathman_version_tag=foreign_copy_from

shardman_repo=https://github.com/postgrespro/pg_shardman.git
shardman_src="{{pg_prefix}}/pg_shardman"
# shardman_version_tag=master
# trigger based replication
# shardman_version_tag=tbr-2pc
# sync version
shardman_version_tag=broadcast

shardman_shardlord_connstring="host={{ shardlord_ip }} port={{ pg_port }} user={{ ansible_user }}"

fg_path="{{ ansible_env.HOME }}/FlameGraph"

test_id=""
logs=logs

[nodes:children]
ec2
manual

[shardlord]
[shardlord:children]
ec2_shardlord
manual_shardlord

[workers]
[workers:children]
ec2_workers
manual_workers

# designated worker on which we will initially create tables
[init_node]
[init_node:children]
ec2_init_node
manual_init_node

# empty groups to be able to run without ec2/manual inventories
[ec2]
[ec2:vars]
# for ec2, take private ip
shardlord_ip="{{ hostvars[groups['shardlord'][0]]['ec2_private_ip_address'] }}"
[ec2_shardlord]
[ec2_workers]
[ec2_init_node]
[manual]
[manual:vars]
# for manual, use just ip specified in inventory
shardlord_ip="{{ groups['shardlord'][0] }}"
[manual_shardlord]
[manual_workers]
[manual_init_node]

[ec2:vars]
# Your aws key
ansible_ssh_private_key_file=~/.ssh/aws_rsa
