### initdb, send configs, create extension and add all workers.
# controlling vars: use_pgbouncer, nodes_in_repgroup

---
- hosts: nodes
  environment:
    PATH: "{{ pg_dst }}/bin:{{ ansible_env.HOME }}/root/bin:{{ ansible_env.PATH }}"
    LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"
    CPATH: "{{ ansible_env.HOME }}/root/include"
    LD_LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"

  tasks:
  - name: pkill pg
    shell: 'pkill -9 postgres || true'
    tags:
      - initdb

  - name: remove datadirs on datanodes
    file: path={{pg_datadir}} state=absent
    tags:
      - initdb

  - name: create datadirs on datanodes
    command: "initdb {{pg_datadir}}"
    tags:
      - initdb

  - import_tasks: tasks/pg_ctl.yml pg_ctl_action=start
    tags:
      - initdb

  - name: create whoami database
    command: "createdb {{ ansible_user }}"
    tags:
      - initdb

  - name: enable blind trust
    lineinfile:
      dest: "{{pg_datadir}}/pg_hba.conf"
      line: "{{item}}"
      state: present
    with_items:
      - "host all all 0.0.0.0/0 trust"
      - "host replication all 0.0.0.0/0 trust"
      - "local replication all trust"

- import_playbook: send_config.yml

- hosts: nodes
  environment:
    PATH: "{{ pg_dst }}/bin:{{ ansible_env.HOME }}/root/bin:{{ ansible_env.PATH }}"
    LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"
    CPATH: "{{ ansible_env.HOME }}/root/include"
    LD_LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"

  tasks:
  - name: create extension pg_shardman
    command: >
      psql -p {{ pg_port }} -c "
      do $$
      declare
      begin
      if exists (select 1 from pg_extension where extname = 'pg_shardman') then
      perform shardman.wipe_state();
      drop extension pg_shardman cascade;
      end if;
      create extension pg_shardman cascade;
      end $$ language 'plpgsql';
      "
    tags:
      - create_ext
  - name: reload conf
    command: psql -p {{ pg_port }} -c "select pg_reload_conf();"
    tags:
      - create_ext

- hosts: shardlord
  vars:
    nodes_in_repgroup: 1

  environment:
    PATH: "{{ pg_dst }}/bin:{{ ansible_env.HOME }}/root/bin:{{ ansible_env.PATH }}"
    LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"
    CPATH: "{{ ansible_env.HOME }}/root/include"
    LD_LIBRARY_PATH: "{{ ansible_env.HOME }}/root/lib"

  tasks:
  # repgroup requires accuracy: we need to be sure that no replication group has
  # less members than nodes_in_repgroup, so set it to min (quotient, max repl group)
  - debug: msg="Putting node {{item.0}} to rg {{ [item.0 // (nodes_in_repgroup | int), ((groups.ec2_workers | length) // (nodes_in_repgroup | int)) - 1] | min }}"
    with_indexed_items: "{{ groups.ec2_workers }}"
    tags:
      - dbg

  - name: add ec2 workers, nodes_in_repgroup is {{ nodes_in_repgroup }}
    command: >
      psql -p {{ pg_port }} -c "select shardman.add_node(
      'hostaddr={{ hostvars[item.1]['ec2_private_ip_address'] }} port={{ pg_port }}',
      'hostaddr={{ hostvars[item.1]['ec2_private_ip_address'] }} port={{ ( use_pgbouncer | bool ) | ternary(pgbouncer_port, pg_port) }}',
      'group_{{ [item.0 // (nodes_in_repgroup | int), ((groups.ec2_workers | length) // (nodes_in_repgroup | int)) - 1] | min }}')
      "
    with_indexed_items: "{{ groups.ec2_workers }}"
    tags:
      - add_nodes

  - debug: msg="Putting node number {{item.0}} ( {{ item.1 }} ) to rg {{ [item.0 // (nodes_in_repgroup | int), ((groups.manual_workers | length) // (nodes_in_repgroup | int)) - 1] | min }}"
    with_indexed_items: "{{ groups.manual_workers }}"
    tags:
      - dbg

  - name: add manual workers, nodes_in_repgroup is {{ nodes_in_repgroup }}
    command: >
      psql -p {{ pg_port }} -c "select shardman.add_node(
      'host={{ item.1 }} port={{ pg_port }}',
      'host={{ item.1 }} port={{ ( use_pgbouncer | bool ) | ternary(pgbouncer_port, pg_port) }}',
      'group_{{ [item.0 // (nodes_in_repgroup | int), ((groups.manual_workers | length) // (nodes_in_repgroup | int)) - 1] | min }}')"
    with_indexed_items: "{{ groups.manual_workers }}"
    tags:
      - add_nodes